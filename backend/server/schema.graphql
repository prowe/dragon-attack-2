scalar TimeSpan

type Query {
    "Returns the current player"
    player: GameCharacter!
}

type GameCharacter {
   id: ID!
   name: String!
   totalHitPoints: Int!
   currentHitPoints: Int!
   currentHealthPercent: Int!

   location: Area!
   abilities: [Ability!]!
}

interface GameCharacterEvent {
    name: String!
    target: GameCharacter!
}

type HealthChangedEvent {
    name: String!
    target: GameCharacter!

    difference: Int!
    resultingHealthPercent: Int!
}

type Ability {
    id: ID!
    name: String!
    cooldown: TimeSpan!
}

type Area {
    id: ID!
    name: String!

    charactersPresent: [GameCharacter!]!
}

interface AreaEvent {
    name: String!
    area: Area!
}

type CharacterEnteredAreaEvent implements AreaEvent {
    name: String!
    area: Area!

    gameCharacter: GameCharacter!
}

type CharacterExitedAreaEvent implements AreaEvent {
    name: String!
    area: Area!

    gameCharacter: GameCharacter!
}

type Mutation {
    joinGame(name: String!): GameCharacter!

    useAbility(abilityId: ID!, targetId: ID!): Int!
}

type Subscription {
    watchCharacter(id: ID!): GameCharacterEvent!

    watchArea(id: ID!): AreaEvent!
}