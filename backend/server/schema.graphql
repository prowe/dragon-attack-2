type Query {
    counter: Int!
}

type Mutation {
    joinGame(name: String!): GameCharacter!

    attackWithAbility (
        playerId: String!,
        targetId: String!,
        abilityId: String!): Int!
}

type Subscription {
    watchCharacter(id: ID!): GameCharacterEvent

    watchArea(id: ID!): AreaEvent
}

type GameCharacter {
    id: ID!
    name: String!

    currentHealthPercent: Int!

    location: Area!
}

union GameCharacterEvent = AttackedEvent

type AttackedEvent {
    damage: Int!
    resultingHealthPercent: Int!

    attacker: GameCharacter!
    target: GameCharacter!
}

type Area {
    id: ID!
    name: String!

    charactersPresent: [GameCharacter!]!
}

union AreaEvent = CharacterEnteredAreaEvent

type CharacterEnteredAreaEvent {
    gameCharacter: GameCharacter!
    area: Area!
}
